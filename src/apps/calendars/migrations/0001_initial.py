# Generated by Django 5.2.4 on 2025-08-04 22:33

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_account_id', models.CharField(help_text='Google account unique identifier', max_length=100)),
                ('email', models.EmailField(help_text='Google account email address', max_length=254)),
                ('access_token', models.TextField(help_text='Encrypted OAuth access token')),
                ('refresh_token', models.TextField(help_text='Encrypted OAuth refresh token')),
                ('token_expires_at', models.DateTimeField(help_text='When the access token expires')),
                ('is_active', models.BooleanField(default=True, help_text='Enable/disable sync for this account')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_accounts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Calendar Account',
                'verbose_name_plural': 'Calendar Accounts',
                'unique_together': {('user', 'google_account_id')},
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_calendar_id', models.CharField(help_text='Google Calendar unique identifier', max_length=200)),
                ('name', models.CharField(help_text='Calendar display name', max_length=200, validators=[django.core.validators.MinLengthValidator(1)])),
                ('description', models.TextField(blank=True, help_text='Calendar description')),
                ('color', models.CharField(blank=True, help_text='Calendar color code', max_length=10)),
                ('is_primary', models.BooleanField(default=False, help_text='Is this the primary calendar for the account')),
                ('sync_enabled', models.BooleanField(default=True, help_text='Enable/disable sync for this calendar')),
                ('last_sync_token', models.CharField(blank=True, help_text='Token for incremental sync', max_length=500)),
                ('last_synced_at', models.DateTimeField(blank=True, help_text='Last successful sync timestamp', null=True)),
                ('webhook_channel_id', models.CharField(blank=True, help_text='Google webhook channel ID for this calendar', max_length=100, null=True)),
                ('webhook_expires_at', models.DateTimeField(blank=True, help_text='When the webhook subscription expires', null=True)),
                ('webhook_last_setup', models.DateTimeField(blank=True, help_text='When webhook was last registered with Google', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendars', to='calendars.calendaraccount')),
            ],
            options={
                'verbose_name': 'Calendar',
                'verbose_name_plural': 'Calendars',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('google_event_id', models.CharField(help_text='Google Calendar event unique identifier', max_length=200)),
                ('title', models.CharField(help_text='Event title/summary', max_length=500, validators=[django.core.validators.MinLengthValidator(1)])),
                ('description', models.TextField(blank=True, help_text='Event description')),
                ('start_time', models.DateTimeField(help_text='Event start datetime (UTC)')),
                ('end_time', models.DateTimeField(help_text='Event end datetime (UTC)')),
                ('is_all_day', models.BooleanField(default=False, help_text='All-day event flag')),
                ('is_busy_block', models.BooleanField(default=False, help_text='System-created busy block flag')),
                ('busy_block_tag', models.CharField(blank=True, help_text='Unique tag for busy block identification', max_length=200)),
                ('event_hash', models.CharField(blank=True, help_text='Hash of event content for change detection', max_length=64)),
                ('is_meeting_invite', models.BooleanField(default=False, help_text='Whether this event is a meeting invite (has attendees)')),
                ('correlation_uuid', models.UUIDField(blank=True, help_text='UUID linking this event to EventState for correlation tracking', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='calendars.calendar')),
                ('source_event', models.ForeignKey(blank=True, help_text='Source event for busy blocks', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='busy_blocks', to='calendars.event')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='EventState',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID for correlation tracking across Google Calendar and our system', primary_key=True, serialize=False)),
                ('google_event_id', models.CharField(blank=True, help_text='Google Calendar event ID (set after sync)', max_length=200, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Sync'), ('SYNCED', 'Synchronized'), ('DELETED', 'Deleted')], default='PENDING', help_text='Current sync status', max_length=20)),
                ('is_busy_block', models.BooleanField(default=False, help_text='True if this is a system-created busy block')),
                ('source_uuid', models.UUIDField(blank=True, help_text='UUID of source event (for busy blocks only)', null=True)),
                ('title', models.CharField(blank=True, help_text='Event title for debugging and display', max_length=500)),
                ('start_time', models.DateTimeField(blank=True, help_text='Event start time (cached for performance)', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Event end time (cached for performance)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen_at', models.DateTimeField(blank=True, help_text='Last time this event was seen in Google Calendar', null=True)),
                ('calendar', models.ForeignKey(help_text='Calendar where this event exists', on_delete=django.db.models.deletion.CASCADE, related_name='event_states', to='calendars.calendar')),
            ],
            options={
                'verbose_name': 'Event State',
                'verbose_name_plural': 'Event States',
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_type', models.CharField(choices=[('full', 'Full Sync'), ('incremental', 'Incremental Sync'), ('manual', 'Manual Sync')], default='incremental', max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('partial', 'Partial Success'), ('in_progress', 'In Progress')], default='in_progress', max_length=20)),
                ('events_processed', models.PositiveIntegerField(default=0, help_text='Total events processed')),
                ('events_created', models.PositiveIntegerField(default=0, help_text='New events created')),
                ('events_updated', models.PositiveIntegerField(default=0, help_text='Events updated')),
                ('events_deleted', models.PositiveIntegerField(default=0, help_text='Events deleted')),
                ('busy_blocks_created', models.PositiveIntegerField(default=0, help_text='Busy blocks created')),
                ('busy_blocks_updated', models.PositiveIntegerField(default=0, help_text='Busy blocks updated')),
                ('busy_blocks_deleted', models.PositiveIntegerField(default=0, help_text='Busy blocks deleted')),
                ('error_message', models.TextField(blank=True, help_text='Error details if sync failed')),
                ('api_calls_made', models.PositiveIntegerField(default=0, help_text='Number of Google API calls made')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When sync completed (success or failure)', null=True)),
                ('calendar_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='calendars.calendaraccount')),
            ],
            options={
                'verbose_name': 'Sync Log',
                'verbose_name_plural': 'Sync Logs',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='calendar',
            index=models.Index(fields=['last_synced_at'], name='calendars_c_last_sy_f373a7_idx'),
        ),
        migrations.AddIndex(
            model_name='calendar',
            index=models.Index(fields=['sync_enabled'], name='calendars_c_sync_en_1033cc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendar',
            unique_together={('calendar_account', 'google_calendar_id')},
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_time', 'end_time'], name='calendars_e_start_t_ff8439_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['is_busy_block'], name='calendars_e_is_busy_623a07_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['source_event'], name='calendars_e_source__429658_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['updated_at'], name='calendars_e_updated_b0a8bb_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['correlation_uuid'], name='calendars_e_correla_e3cc52_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('calendar', 'google_event_id')},
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['calendar', 'status'], name='calendars_e_calenda_35f7f0_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['calendar', 'is_busy_block'], name='calendars_e_calenda_85244c_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['google_event_id'], name='calendars_e_google__a446ca_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['source_uuid'], name='calendars_e_source__004452_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['status'], name='calendars_e_status_ad5b59_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['last_seen_at'], name='calendars_e_last_se_82a818_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventstate',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(models.Q(('is_busy_block', False), ('source_uuid__isnull', True)), models.Q(('is_busy_block', True), ('source_uuid__isnull', False)), _connector='OR')), name='busy_block_source_constraint'),
        ),
    ]
