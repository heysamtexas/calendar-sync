# Generated by Django 5.2.4 on 2025-08-04 22:20

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('calendars', '0004_add_webhook_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='EventState',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='UUID for correlation tracking across Google Calendar and our system', primary_key=True, serialize=False)),
                ('google_event_id', models.CharField(blank=True, help_text='Google Calendar event ID (set after sync)', max_length=200, null=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending Sync'), ('SYNCED', 'Synchronized'), ('DELETED', 'Deleted')], default='PENDING', help_text='Current sync status', max_length=20)),
                ('is_busy_block', models.BooleanField(default=False, help_text='True if this is a system-created busy block')),
                ('source_uuid', models.UUIDField(blank=True, help_text='UUID of source event (for busy blocks only)', null=True)),
                ('title', models.CharField(blank=True, help_text='Event title for debugging and display', max_length=500)),
                ('start_time', models.DateTimeField(blank=True, help_text='Event start time (cached for performance)', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Event end time (cached for performance)', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_seen_at', models.DateTimeField(blank=True, help_text='Last time this event was seen in Google Calendar', null=True)),
            ],
            options={
                'verbose_name': 'Event State',
                'verbose_name_plural': 'Event States',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='correlation_uuid',
            field=models.UUIDField(blank=True, help_text='UUID linking this event to EventState for correlation tracking', null=True),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['correlation_uuid'], name='calendars_e_correla_e3cc52_idx'),
        ),
        migrations.AddField(
            model_name='eventstate',
            name='calendar',
            field=models.ForeignKey(help_text='Calendar where this event exists', on_delete=django.db.models.deletion.CASCADE, related_name='event_states', to='calendars.calendar'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['calendar', 'status'], name='calendars_e_calenda_35f7f0_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['calendar', 'is_busy_block'], name='calendars_e_calenda_85244c_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['google_event_id'], name='calendars_e_google__a446ca_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['source_uuid'], name='calendars_e_source__004452_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['status'], name='calendars_e_status_ad5b59_idx'),
        ),
        migrations.AddIndex(
            model_name='eventstate',
            index=models.Index(fields=['last_seen_at'], name='calendars_e_last_se_82a818_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventstate',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(models.Q(('is_busy_block', False), ('source_uuid__isnull', True)), models.Q(('is_busy_block', True), ('source_uuid__isnull', False)), _connector='OR')), name='busy_block_source_constraint'),
        ),
    ]
