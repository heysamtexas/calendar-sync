[project]
name = "calendar-sync"
version = "0.1.0"
description = "A self-hosted Django application for syncing events across multiple Google calendars"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
dependencies = [
    "django>=4.2",
    "whitenoise>=6.0.0",
    "django-environ",
    "google-api-python-client>=2.0.0",
    "google-auth-httplib2>=0.1.0",
    "google-auth-oauthlib>=1.0.0",
    "cryptography>=41.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff",
    "coverage[toml]",
    "mypy",
    "django-stubs[compatible-mypy]",
    "django-debug-toolbar",
]

# Build system removed - using pyproject.toml for dependency management only
# Will add back when we need to package the application

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "*/migrations/*",
]

# Same as Django: https://github.com/django/django/blob/main/pyproject.toml
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable comprehensive rule sets for high-quality Django code
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "DJ",   # flake8-django
    "C90",  # mccabe complexity
    "N",    # pep8-naming
    "PL",   # pylint
    "RUF",  # ruff-specific rules
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "ERA",  # eradicate (commented-out code)
    "PIE",  # flake8-pie
    "SIM",  # flake8-simplify
    "PTH",  # flake8-use-pathlib
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "ICN",  # flake8-import-conventions
]
ignore = [
    "E501",   # line too long, handled by formatter
    "E203",   # whitespace before ':'
    "B008",   # do not perform function calls in argument defaults (common in Django)
    "B905",   # `zip()` without an explicit `strict=` parameter
    "S101",   # use of assert (common in tests)
    "S105",   # hardcoded password (false positives in tests)
    "S106",   # hardcoded password (false positives in tests)
    "S108",   # insecure temp file (false positives)
    "PLR0913", # too many arguments (common in Django models)
    "PLR2004", # magic value (allow some magic numbers in Django)
    "A003",   # builtin attribute shadowing (common in Django models)
    "COM812", # trailing comma (handled by formatter)
    "COM819", # trailing comma (handled by formatter)
    "T201",   # print statements (allow in management commands)
    "ERA001", # commented out code (allow during development)
    "N806",   # variable in function should be lowercase (Django allows UPPER_CASE)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# McCabe complexity settings
[tool.ruff.lint.mccabe]
max-complexity = 8

# Pylint settings
[tool.ruff.lint.pylint]
max-args = 6
max-branches = 12
max-returns = 6
max-statements = 50

# Import sorting settings (isort compatibility)
[tool.ruff.lint.isort]
known-first-party = ["apps", "calendar_sync"]
known-third-party = ["django", "google", "cryptography"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2

# Per-file ignores for different types of files
[tool.ruff.lint.per-file-ignores]
# Django settings files
"*/settings/*.py" = ["S105", "S106", "F405", "F403"]
# Test files
"*/tests/*.py" = ["S101", "S105", "S106", "PLR2004", "S311"]
"test_*.py" = ["S101", "S105", "S106", "PLR2004", "S311"]
# Migration files (auto-generated)
"*/migrations/*.py" = ["ALL"]
# Django admin files (less strict)
"*/admin.py" = ["A003", "PLR0913"]
# Management commands (allow print statements)
"*/management/commands/*.py" = ["T201"]
# Django models (less strict on certain rules)
"*/models.py" = ["A003", "PLR0913"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/settings/*",
    "*/wsgi.py",
    "*/asgi.py",
    "manage.py",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.coverage.html]
directory = "htmlcov"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["mypy_django_plugin.main"]

[tool.django-stubs]
django_settings_module = "calendar_sync.settings"

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "manage"
ignore_errors = true